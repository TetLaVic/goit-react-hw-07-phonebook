{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","redux/ContactForm/ContactForm-actions.js","redux/ContactForm/ContactForm-reducer.js","redux/store.js","redux/ContactForm/ContactForm-operations.js","components/ContactForm/ContactForm.js","redux/ContactForm/ContactForm-selectors.js","components/Filter/Filter.js","components/ContactList/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterChange","actions","itemsReducer","createReducer","state","payload","find","contact","name","alert","filter","id","filterReducer","_","loading","contactsReducer","combineReducers","items","rootReducer","contacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","axios","defaults","baseURL","number","dispatch","post","then","data","catch","error","contactId","delete","get","ContactForm","reset","setState","handleChange","event","preventDefault","currentTarget","value","currentState","updateState","handleSubmit","props","onSubmit","nameInputId","genId","telInputId","this","className","styles","contactForm","htmlFor","labelForm","type","onChange","inputForm","buttonForm","Component","connect","operations","getFilter","getContacts","createSelector","normalizedFilter","toLowerCase","includes","Filter","filterInputId","filterState","onFilterChange","labelFilter","inputFilter","selectors","target","ContactListItem","onDeleteContact","listItem","onClick","buttonListItem","ContactList","onLoad","contactsList","map","contactList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,UAAY,+BAA+B,UAAY,+BAA+B,WAAa,kC,mBCApKD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,YAAc,8B,mBCA1ED,EAAOC,QAAU,CAAC,SAAW,kCAAkC,eAAiB,0C,mBCAhFD,EAAOC,QAAU,CAAC,YAAc,mC,8JCG1BC,EAAuBC,YAAa,iCACpCC,EAAuBD,YAAa,iCACpCE,EAAqBF,YAAa,+BAuCzB,GACbG,kBAtCwBH,YAAa,8BAuCrCI,kBAtCwBJ,YAAa,8BAuCrCK,gBAtCsBL,YAAa,4BAuCnCM,qBArC2BN,YAAa,iCAsCxCO,qBArC2BP,YAAa,iCAsCxCQ,mBArCyBR,YAAa,+BAsCtCS,aATmBT,YAAa,4BAUhCD,uBACAE,uBACAC,sBClDAC,EASEO,EATFP,kBACAC,EAQEM,EARFN,kBACAC,EAOEK,EAPFL,gBACAC,EAMEI,EANFJ,qBACAC,EAKEG,EALFH,qBACAC,EAIEE,EAJFF,mBAEAP,GAEES,EAHFX,qBAGEW,EAFFT,sBA0BIU,GAxBFD,EADFR,mBAyBmBU,YAAc,IAAD,mBAC/BX,GAAuB,SAACY,EAAD,YAAUC,WADF,cAE/BV,GAAoB,SAACS,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC7B,OAAID,EAAME,MAAK,SAAAC,GAAO,OAAIA,EAAQC,OAASH,EAAQG,SACjDC,MAAM,GAAD,OAAIJ,EAAQG,KAAZ,6BACEJ,GAEH,GAAN,mBAAWA,GAAX,CAAkBC,OAPY,cAS/BP,GAAuB,SAACM,EAAD,OAAUC,EAAV,EAAUA,QAAV,OACtBD,EAAMM,QAAO,qBAAGC,KAAgBN,QAVF,KAsB5BO,EAAgBT,YAAc,GAAI,CACtC,2BAA4B,SAACU,EAAD,YAAMR,WAG9BS,EAAUX,aAAc,GAAD,mBAC1BT,GAAoB,kBAAM,KADA,cAE1BC,GAAoB,kBAAM,KAFA,cAG1BC,GAAkB,kBAAM,KAHE,cAI1BC,GAAuB,kBAAM,KAJH,cAK1BC,GAAuB,kBAAM,KALH,cAM1BC,GAAqB,kBAAM,KAND,IAedgB,EANSC,YAAgB,CACtCC,MAAOf,EACPQ,OAAQE,EACRE,Y,yBCtDII,EAAcF,YAAgB,CAClCG,SAAUJ,IAQNK,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAUaC,EARDC,YAAe,CAC3BC,QAASf,EACTE,aACAc,UAAUC,I,+FCvCZC,IAAMC,SAASC,QAAU,yBAEzB,IAyBe,EAhBI,SAAC,GAAD,IAAG9B,EAAH,EAAGA,KAAM+B,EAAT,EAASA,OAAT,OAAsB,SAAAC,GACvCA,EAASvC,EAAQP,qBACjB0C,IACGK,KAAK,YAAa,CAAEjC,OAAM+B,WAC1BG,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASvC,EAAQN,kBAAkBgD,OACtDC,OAAM,SAAAC,GAAK,OAAIL,EAASvC,EAAQL,gBAAgBiD,SAWtC,EARO,SAAAC,GAAS,OAAI,SAAAN,GACjCA,EAASvC,EAAQJ,wBACjBuC,IACGW,OADH,oBACuBD,IACpBJ,MAAK,kBAAMF,EAASvC,EAAQH,qBAAqBgD,OACjDF,OAAM,SAAAC,GAAK,OAAIL,EAASvC,EAAQF,mBAAmB8C,SAGzC,EAzBO,kBAAM,SAAAL,GAC1BA,EAASvC,EAAQX,wBAEjB8C,IACGY,IAAI,cACJN,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASvC,EAAQT,qBAAqBmD,OACzDC,OAAM,SAAAC,GAAK,OAAIL,EAASvC,EAAQR,mBAAmBoD,S,OCJlDI,E,4MACJ7C,MAAQ,CAAEI,KAAM,GAAI+B,OAAQ,I,EAE5BW,MAAQ,WACN,EAAKC,SAAS,CAAE3C,KAAM,GAAI+B,OAAQ,M,EAGpCa,aAAe,SAAAC,GACbA,EAAMC,iBADgB,MAEED,EAAME,cAAtB/C,EAFc,EAEdA,KAAMgD,EAFQ,EAERA,MACRC,EAAe,EAAKrD,MACpBsD,EAAW,eAAMlD,EAAOgD,GAC9B,EAAKL,SAAL,2BAAmBM,GAAiBC,K,EAGtCC,aAAe,SAAAN,GACbA,EAAMC,iBACN,EAAKM,MAAMC,SAAS,EAAKzD,OACzB,EAAK8C,S,4CAGP,WACE,IAAMY,EAAcC,cACdC,EAAaD,cAEnB,OACE,uBAAMF,SAAUI,KAAKN,aAAcO,UAAWC,IAAOC,YAArD,UACE,wBAAOC,QAASP,EAAaI,UAAWC,IAAOG,UAA/C,iBAEE,uBACEC,KAAK,OACL/D,KAAK,OACLG,GAAImD,EACJN,MAAOS,KAAK7D,MAAMI,KAClBgE,SAAUP,KAAKb,aACfc,UAAWC,IAAOM,eAItB,wBAAOJ,QAASL,EAAYE,UAAWC,IAAOG,UAA9C,mBAEE,uBACEC,KAAK,MACL/D,KAAK,SACLG,GAAIqD,EACJR,MAAOS,KAAK7D,MAAMmC,OAClBiC,SAAUP,KAAKb,aACfc,UAAWC,IAAOM,eAGtB,wBAAQF,KAAK,SAASL,UAAWC,IAAOO,WAAxC,gC,GAlDkBC,aAmEXC,cAAQ,MAJI,SAAApC,GAAQ,MAAK,CACtCqB,SAAU,SAAAtD,GAAO,OAAIiC,EAASqC,EAAsBtE,QAGvCqE,CAAkC3B,G,yBCxE3C6B,GAAY,SAAA1E,GAAK,OAAIA,EAAMe,SAAST,QAqB3B,IAAEoE,aAAWC,YAPRC,YAAe,CAACF,GAZnB,SAAA1E,GAAK,OAAIA,EAAMe,SAASF,SAYiB,SAACP,EAAQO,GACjE,IAAMgE,EAAmBvE,EAAOwE,cAChC,OAAOjE,EAAMP,QAAO,gBAAGF,EAAH,EAAGA,KAAH,QAClBA,GAAOA,EAAK0E,cAAcC,SAASF,UCXjCG,G,4JACJ,WACE,IAAMC,EAAgBtB,cADf,EAEiCE,KAAKL,MAArC0B,EAFD,EAECA,YAAaC,EAFd,EAEcA,eACrB,OACE,wBAAOlB,QAASgB,EAAenB,UAAWC,IAAOqB,YAAjD,kCAEE,uBACEjB,KAAK,OACL/D,KAAK,SACLG,GAAI0E,EACJ7B,MAAO8B,EACPd,SAAUe,EACVrB,UAAWC,IAAOsB,qB,GAbPd,aAkCNC,gBATS,SAAAxE,GAAK,MAAK,CAChCkF,YAAaI,GAAUZ,UAAU1E,OAIR,SAAAoC,GAAQ,MAAK,CACtC+C,eAAgB,SAAAlC,GAAK,OAAIb,EAASvC,EAAQD,aAAaqD,EAAMsC,OAAOnC,YAGvDoB,CAA6CQ,I,oBChB7CQ,GAtBS,SAAC,GAA2C,IAAzCpF,EAAwC,EAAxCA,KAAM+B,EAAkC,EAAlCA,OAAQ5B,EAA0B,EAA1BA,GAAIkF,EAAsB,EAAtBA,gBAC3C,OACE,qBAAIlF,GAAIA,EAAIuD,UAAWC,KAAO2B,SAA9B,UACGtF,EADH,KACW+B,EACT,wBACEwD,QAAS,WACPF,EAAgBlF,IAElBuD,UAAWC,KAAO6B,eAJpB,wB,oBCAAC,G,uKACJ,WACEhC,KAAKL,MAAMsC,W,oBAEb,WAAU,IAAD,EACmCjC,KAAKL,MAAvCuC,EADD,EACCA,aAAcN,EADf,EACeA,gBACtB,OACE,6BACGM,EAAaC,KAAI,YAA2B,IAAxB5F,EAAuB,EAAvBA,KAAM+B,EAAiB,EAAjBA,OAAQ5B,EAAS,EAATA,GACjC,OACE,cAAC,GAAD,CACEH,KAAMA,EACN+B,OAAQA,EAER5B,GAAIA,EACJkF,gBAAiBA,EACjB3B,UAAWC,KAAOkC,aAHb1F,Y,GAbOgE,aA6CXC,gBATS,SAAAxE,GAAK,MAAK,CAChC+F,aAAcT,GAAUX,YAAY3E,OAGX,SAAAoC,GAAQ,MAAK,CACtCqD,gBAAiB,SAAA/C,GAAS,OAAIN,EAASqC,EAAyB/B,KAChEoD,OAAQ,kBAAM1D,EAASqC,SAGVD,CAA6CqB,ICzB7CK,G,4JAbb,WACE,OACE,qCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,GAAD,IACA,cAAC,GAAD,W,GAdU3B,aCAlB4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU1E,MAAOA,EAAjB,SAEE,cAAC,GAAD,QAIJ2E,SAASC,eAAe,W","file":"static/js/main.31e1bf15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__39GmN\",\"labelForm\":\"ContactForm_labelForm__f5FjI\",\"inputForm\":\"ContactForm_inputForm__y08yY\",\"buttonForm\":\"ContactForm_buttonForm__3STP1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelFilter\":\"Filter_labelFilter__1wdQA\",\"inputFilter\":\"Filter_inputFilter__1VdXx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__2P4m9\",\"buttonListItem\":\"ContactListItem_buttonListItem__2xrti\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3toEj\"};","// import types from './ContactForm-types';\r\n// import { v4 as genId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// const addContact = ({ name, number, id }) => {\r\n//   return {\r\n//     type: types.ADD_CONTACT,\r\n//     payload: { name, number, id: genId() },\r\n//   };\r\n// };\r\n\r\n// const addContact = createAction(\r\n//   'ContactForm/AddContact',\r\n//   ({ name, number }) => {\r\n//     return { payload: { name, number, id: genId() } };\r\n//   },\r\n// );\r\n\r\n// const deleteContact = contactId => {\r\n//   return { type: types.DELETE_CONTACT, payload: contactId };\r\n// };\r\n\r\n// const deleteContact = createAction('ContactForm/DeleteContact');\r\n\r\n// const filterChange = value => {\r\n//   return {\r\n//     type: types.FILTER_CHANGE,\r\n//     payload: value,\r\n//   };\r\n// };\r\n\r\nconst filterChange = createAction('ContactForm/FilterChange');\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterChange,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n};\r\n","import { combineReducers } from 'redux';\r\n// import types from './ContactForm-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './ContactForm-actions';\r\nconst {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} = actions;\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       if (state.find(contact => contact.name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return state;\r\n//       }\r\n//       return [...state, payload];\r\n//     case types.DELETE_CONTACT:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const findContact = (state, payload) => {\r\n//   if (state.find(contact => contact.name === payload.name)) {\r\n//     alert(`${payload.name} is already in contacts.`);\r\n//     return state;\r\n//   }\r\n// };\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    if (state.find(contact => contact.name === payload.name)) {\r\n      alert(`${payload.name} is already in contacts.`);\r\n      return state;\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER_CHANGE:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer('', {\r\n  'ContactForm/FilterChange': (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './ContactForm/ContactForm-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n// import persistReducer from 'redux-persist/es/persistReducer';\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// const rootReducer = {\r\n//   contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport actions from './ContactForm-actions';\r\n\r\naxios.defaults.baseURL = ' http://localhost:4000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('./contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(actions.addContactRequest());\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/ContactForm/ContactForm-operations';\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: '', number: '' };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  handleChange = event => {\r\n    event.preventDefault();\r\n    const { name, value } = event.currentTarget;\r\n    const currentState = this.state;\r\n    const updateState = { [name]: value };\r\n    this.setState({ ...currentState, ...updateState });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    const nameInputId = genId();\r\n    const telInputId = genId();\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.contactForm}>\r\n        <label htmlFor={nameInputId} className={styles.labelForm}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id={nameInputId}\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            className={styles.inputForm}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={telInputId} className={styles.labelForm}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            id={telInputId}\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            className={styles.inputForm}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.buttonForm}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(operations.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getItems = state => state.contacts.items;\r\n\r\n// const getContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const items = getItems(state);\r\n\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return items.filter(({ name }) =>\r\n//     name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n//   );\r\n// };\r\n\r\nconst getContacts = createSelector([getFilter, getItems], (filter, items) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(({ name }) =>\r\n    name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n  );\r\n});\r\n\r\nexport default { getFilter, getContacts };\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/ContactForm/ContactForm-actions';\r\nimport selectors from '../../redux/ContactForm/ContactForm-selectors';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    const filterInputId = genId();\r\n    const { filterState, onFilterChange } = this.props;\r\n    return (\r\n      <label htmlFor={filterInputId} className={styles.labelFilter}>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          id={filterInputId}\r\n          value={filterState}\r\n          onChange={onFilterChange}\r\n          className={styles.inputFilter}\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filters: PropTypes.string,\r\n  onFilterChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: selectors.getFilter(state),\r\n  // filterState: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFilterChange: event => dispatch(actions.filterChange(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, number, id, onDeleteContact }) => {\r\n  return (\r\n    <li id={id} className={styles.listItem}>\r\n      {name}: {number}\r\n      <button\r\n        onClick={() => {\r\n          onDeleteContact(id);\r\n        }}\r\n        className={styles.buttonListItem}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\nexport default ContactListItem;\r\n","import { Component } from 'react';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/ContactForm/ContactForm-operations';\r\nimport selectors from '../../redux/ContactForm/ContactForm-selectors';\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.onLoad();\r\n  }\r\n  render() {\r\n    const { contactsList, onDeleteContact } = this.props;\r\n    return (\r\n      <ul>\r\n        {contactsList.map(({ name, number, id }) => {\r\n          return (\r\n            <ContactListItem\r\n              name={name}\r\n              number={number}\r\n              key={id}\r\n              id={id}\r\n              onDeleteContact={onDeleteContact}\r\n              className={styles.contactList}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// const getContactsToShow = ({ filter, items }) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return items.filter(({ name }) =>\r\n//     name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsList: selectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: contactId => dispatch(operations.deleteContact(contactId)),\r\n  onLoad: () => dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\nimport './App.css';\n\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n// import { v4 as genId } from 'uuid';\n\nclass App extends Component {\n  // componentDidMount() {\n  // }\n\n  // componentDidUpdate(_, prevState) {\n  // }\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}